@startuml
!define RECTANGLE class

' Color definitions for different relationship types
!define CREATION_COLOR #FF6B6B
!define COMPOSITION_COLOR #4ECDC4
!define INHERITANCE_COLOR #45B7D1
!define USAGE_COLOR #96CEB4
!define MANAGEMENT_COLOR #FFEAA7
!define CALLBACK_COLOR #DDA0DD

left to right direction

skinparam linetype ortho
skinparam nodesep 100
skinparam ranksep 100

' Configure line colors
skinparam ArrowColor black
skinparam ArrowThickness 2

' Main Classes and Objects
package "Exo System Architecture" {

  ' Core Node System
  object "main" as main <<entry point>>
  object "node: Node" as node <<core orchestrator>>
  object "topology: Topology" as topology <<network state>>
  object "topology_viz: TopologyViz" as topology_viz <<visualization>>

  ' Networking Layer
  object "discovery: UDPDiscovery" as udp_discovery <<service discovery>>
  object "discovery: TailscaleDiscovery" as tailscale_discovery <<service discovery>>
  object "discovery: ManualDiscovery" as manual_discovery <<service discovery>>
  object "server: GRPCServer" as grpc_server <<network server>>
  object "peer_handles: List<PeerHandle>" as peer_handles <<connected peers>>

  ' Inference Layer
  object "inference_engine: InferenceEngine" as inference_engine <<abstract base>>
  object "mlx_engine: MLXDynamicShardInferenceEngine" as mlx_engine <<MLX inference>>
  object "tinygrad_engine: TinygradDynamicShardInferenceEngine" as tinygrad_engine <<Tinygrad inference>>
  object "dummy_engine: DummyInferenceEngine" as dummy_engine <<Test inference>>

  ' API Layer
  object "api: ChatGPTAPI" as chatgpt_api <<REST API>>
  object "shard_downloader: ShardDownloader" as shard_downloader <<model management>>

  ' Data Objects
  object "shard: Shard" as shard <<model partition>>
  object "partition_strategy: RingMemoryWeightedPartitioningStrategy" as partition_strategy <<partitioning>>
  object "device_capabilities: DeviceCapabilities" as device_capabilities <<hardware info>>
  object "partitions: List<Partition>" as partitions <<shard partitions>>

}

' Relationships and Connections - Color coded by type
main -[CREATION_COLOR]-> node : creates & manages
main -[CREATION_COLOR]-> topology_viz : creates (optional)
main -[CREATION_COLOR]-> chatgpt_api : creates

node -[MANAGEMENT_COLOR]-> topology : manages network state
node -[USAGE_COLOR]-> inference_engine : uses for inference
node -[USAGE_COLOR]-> discovery : uses for peer discovery
node -[MANAGEMENT_COLOR]-> server : provides network interface
node -[MANAGEMENT_COLOR]-> shard_downloader : manages model downloads
node -[USAGE_COLOR]-> partition_strategy : uses for partitioning
node -[MANAGEMENT_COLOR]-> topology_viz : updates visualization

discovery -[MANAGEMENT_COLOR]-> peer_handles : maintains peer connections
discovery -[MANAGEMENT_COLOR]-> device_capabilities : broadcasts capabilities

server -[MANAGEMENT_COLOR]-> node : serves node functionality

inference_engine -[USAGE_COLOR]-> shard : operates on
inference_engine -[MANAGEMENT_COLOR]-> shard_downloader : downloads shards

' Inheritance relationships - blue
mlx_engine -[INHERITANCE_COLOR]-|> inference_engine : implements
tinygrad_engine -[INHERITANCE_COLOR]-|> inference_engine : implements  
dummy_engine -[INHERITANCE_COLOR]-|> inference_engine : implements

partition_strategy -[MANAGEMENT_COLOR]-> topology : analyzes network
partition_strategy -[MANAGEMENT_COLOR]-> partitions : generates
partitions -[MANAGEMENT_COLOR]-> shard : maps to

chatgpt_api -[USAGE_COLOR]-> node : uses for processing
chatgpt_api -[USAGE_COLOR]-> inference_engine : identifies engine type

' Network topology relationships - green
topology -[MANAGEMENT_COLOR]-> device_capabilities : contains node capabilities
topology -[MANAGEMENT_COLOR]-> partitions : generates based on

' Service discovery types - blue inheritance
udp_discovery -[INHERITANCE_COLOR]-|> discovery : implements
tailscale_discovery -[INHERITANCE_COLOR]-|> discovery : implements
manual_discovery -[INHERITANCE_COLOR]-|> discovery : implements

' Key object interactions - teal composition
node o-[COMPOSITION_COLOR]- topology : has-a (composition)
node o-[COMPOSITION_COLOR]- inference_engine : has-a
node o-[COMPOSITION_COLOR]- discovery : has-a
node o-[COMPOSITION_COLOR]- server : has-a
node o-[COMPOSITION_COLOR]- shard_downloader : has-a
node o-[COMPOSITION_COLOR]- partition_strategy : has-a

shard_downloader o-[COMPOSITION_COLOR]- shard : manages
inference_engine o-[COMPOSITION_COLOR]- shard : processes

' Callback systems - purple
node -[CALLBACK_COLOR]-> node.on_token : provides callback system
node -[CALLBACK_COLOR]-> node.on_opaque_status : provides status callbacks

' Visualization updates - orange
topology_viz -[MANAGEMENT_COLOR]-> topology : displays
topology_viz -[MANAGEMENT_COLOR]-> partitions : displays

@enduml