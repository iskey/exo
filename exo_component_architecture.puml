@startuml
!define RECTANGLE class

' Color definitions for component relationships
!define APPLICATION_COLOR #FF6B6B
!define ORCHESTRATION_COLOR #4ECDC4
!define NETWORK_COLOR #45B7D1
!define INFERENCE_COLOR #96CEB4
!define MANAGEMENT_COLOR #FFEAA7
!define VISUALIZATION_COLOR #DDA0DD
!define DATA_COLOR #F8C471
!define IMPLEMENTATION_COLOR #BB8FCE

title Exo System Component Architecture

left to right direction

skinparam linetype ortho
skinparam nodesep 100
skinparam ranksep 100
skinparam ArrowThickness 2

package "Application Layer" {
  [main.py] as main
  [ChatGPT API] as api
  [CLI Interface] as cli
}

package "Orchestration Layer" {
  [Node] as node
  [Topology Management] as topology
  [Partitioning Strategy] as partitioning
  [Callback System] as callbacks
}

package "Network Layer" {
  [GRPC Server] as grpc_server
  [Discovery Services] as discovery
  [Peer Management] as peers
  
  package "Discovery Implementations" {
    [UDP Discovery] as udp
    [Tailscale Discovery] as tailscale
    [Manual Discovery] as manual
  }
}

package "Inference Layer" {
  [Inference Engine] as engine
  [MLX Engine] as mlx
  [TinyGrad Engine] as tinygrad
  [Dummy Engine] as dummy
}

package "Model Management" {
  [Shard Downloader] as downloader
  [Model Repository] as repository
  [Shard Management] as shards
}

package "Visualization Layer" {
  [Topology Viz] as viz
  [Console UI] as console
}

package "Data Objects" {
  [Shard] as shard_obj
  [Partition] as partition_obj
  [Topology] as topology_obj
  [DeviceCapabilities] as capabilities
  [PeerHandle] as peer_handle
}

' Layer Dependencies - Color coded by layer type
main -[APPLICATION_COLOR]--> node : uses
main -[APPLICATION_COLOR]--> api : creates
main -[APPLICATION_COLOR]--> cli : provides

api -[APPLICATION_COLOR]--> node : delegates
cli -[APPLICATION_COLOR]--> node : delegates

node -[ORCHESTRATION_COLOR]--> topology : manages
node -[ORCHESTRATION_COLOR]--> partitioning : uses
node -[NETWORK_COLOR]--> discovery : uses
node -[NETWORK_COLOR]--> grpc_server : provides
node -[INFERENCE_COLOR]--> engine : uses
node -[MANAGEMENT_COLOR]--> downloader : uses
node -[ORCHESTRATION_COLOR]--> callbacks : provides
node -[VISUALIZATION_COLOR]--> viz : updates

discovery -[NETWORK_COLOR]--> peers : manages
udp -[IMPLEMENTATION_COLOR]--|> discovery : implements
tailscale -[IMPLEMENTATION_COLOR]--|> discovery : implements
manual -[IMPLEMENTATION_COLOR]--|> discovery : implements

engine -[INFERENCE_COLOR]--> shards : operates on
mlx -[IMPLEMENTATION_COLOR]--|> engine : implements
tinygrad -[IMPLEMENTATION_COLOR]--|> engine : implements
dummy -[IMPLEMENTATION_COLOR]--|> engine : implements

downloader -[MANAGEMENT_COLOR]--> repository : downloads from
downloader -[MANAGEMENT_COLOR]--> shards : manages

viz -[VISUALIZATION_COLOR]--> topology : displays
viz -[VISUALIZATION_COLOR]--> console : renders

' Object Relationships - Data layer
partitioning -[DATA_COLOR]--> partition_obj : creates
node -[DATA_COLOR]--> shard_obj : uses
discovery -[NETWORK_COLOR]--> peer_handle : manages
node -[DATA_COLOR]--> topology_obj : maintains
node -[DATA_COLOR]--> capabilities : broadcasts

' Key Interactions
node -[hidden]-> discovery
node -[hidden]-> engine
node -[hidden]-> downloader

note top of node
	Central orchestrator that coordinates
	all system components and manages
	distributed inference across the cluster
end note

note right of discovery
	Handles peer discovery and
	maintains cluster membership
end note

note bottom of engine
	Performs actual model inference
	using different backend implementations
end note

note left of downloader
	Manages model shard downloads
	and caching from repositories
end note

@enduml